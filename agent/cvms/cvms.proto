// Copyright (c) Ultraviolet
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package cvms;

option go_package = "./cvms";

service Service {
  rpc Process(stream ClientStreamMessage) returns (stream ServerStreamMessage) {}
}

message AgentStateReq {
  string id = 1;
}

message AgentStateRes {
  string id = 1;
  string state = 2;
}

message StopComputation {
  string computation_id = 1;
}

message StopComputationResponse {
  string computation_id = 1;
  string message = 2;
}

message RunResponse{
  string computation_id = 1;
  string error = 2;
}

message AgentEvent {
  string event_type = 1;
	google.protobuf.Timestamp timestamp = 2;
	string	computation_id = 3;
	bytes	details = 4;
	string	originator = 5;
	string	status = 6;
}

message AgentLog {
  string message = 1;
  string computation_id = 2;
  string level = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message ClientStreamMessage {
  oneof message {
    AgentLog agent_log = 1;
    AgentEvent agent_event = 2;
    RunResponse run_res = 3;
    StopComputationResponse stopComputationRes = 4;
    AgentStateRes agentStateRes = 5;
    AttestationResponse vTPMattestationReport = 6;
    azureAttestationResponse azureAttestationResult = 7;
  }
}

message ServerStreamMessage {
  oneof message {
    RunReqChunks runReqChunks = 1;
    ComputationRunReq runReq = 2;
    StopComputation stopComputation = 3;
    AgentStateReq agentStateReq = 4;
  }
}

message RunReqChunks {
  bytes data = 1;
  string id = 2;
  bool is_last = 3;
}

message ComputationRunReq {
  string id = 1;
  string name = 2;
  string description = 3;
  repeated Dataset datasets = 4;
  Algorithm algorithm = 5;
  repeated ResultConsumer result_consumers = 6;
  AgentConfig agent_config = 7;
}

message ResultConsumer {
  bytes userKey = 1;
}

message Dataset {
  bytes hash = 1; // should be sha3.Sum256, 32 byte length.
  bytes userKey = 2;
  string filename = 3;
}

message Algorithm {
  bytes hash = 1; // should be sha3.Sum256, 32 byte length.
  bytes userKey = 2;
}

message AgentConfig {
  string port = 1;
  string cert_file = 2;
  string key_file = 3;
  string client_ca_file = 4;
  string server_ca_file = 5;
  string log_level = 6;
  bool   attested_tls = 7;
}

message AttestationResponse {
  bytes file = 1;
  string certSerialNumber = 2;
}

message azureAttestationResponse {
  bytes file = 1;
  string certSerialNumber = 2;
}
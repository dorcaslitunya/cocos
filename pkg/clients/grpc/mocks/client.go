// Copyright (c) Ultraviolet
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	google_golang_orggrpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *Client) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Client_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Client_Expecter) Close() *Client_Close_Call {
	return &Client_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Client_Close_Call) Run(run func()) *Client_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Close_Call) Return(_a0 error) *Client_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Close_Call) RunAndReturn(run func() error) *Client_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Connection provides a mock function with no fields
func (_m *Client) Connection() *google_golang_orggrpc.ClientConn {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connection")
	}

	var r0 *google_golang_orggrpc.ClientConn
	if rf, ok := ret.Get(0).(func() *google_golang_orggrpc.ClientConn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google_golang_orggrpc.ClientConn)
		}
	}

	return r0
}

// Client_Connection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connection'
type Client_Connection_Call struct {
	*mock.Call
}

// Connection is a helper method to define mock.On call
func (_e *Client_Expecter) Connection() *Client_Connection_Call {
	return &Client_Connection_Call{Call: _e.mock.On("Connection")}
}

func (_c *Client_Connection_Call) Run(run func()) *Client_Connection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Connection_Call) Return(_a0 *google_golang_orggrpc.ClientConn) *Client_Connection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Connection_Call) RunAndReturn(run func() *google_golang_orggrpc.ClientConn) *Client_Connection_Call {
	_c.Call.Return(run)
	return _c
}

// Secure provides a mock function with no fields
func (_m *Client) Secure() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Secure")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Client_Secure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Secure'
type Client_Secure_Call struct {
	*mock.Call
}

// Secure is a helper method to define mock.On call
func (_e *Client_Expecter) Secure() *Client_Secure_Call {
	return &Client_Secure_Call{Call: _e.mock.On("Secure")}
}

func (_c *Client_Secure_Call) Run(run func()) *Client_Secure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Secure_Call) Return(_a0 string) *Client_Secure_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Secure_Call) RunAndReturn(run func() string) *Client_Secure_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
